"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultProtoCodec = exports.ProtoCodec = void 0;
const proto_1 = require("../proto");
const proto_2 = require("../proto");
const unknown_1 = require("./unknown");
__exportStar(require("./unknown"), exports);
class ProtoCodec {
    constructor() {
        this.typeUrlMap = new Map();
    }
    /**
     * Unpack the any to the registered message.
     * NOTE: If there is no matched message, it will not throw an error but return the `UnknownMessage` class.
     * @param iAny
     */
    unpackAny(iAny) {
        const any = new proto_1.google.protobuf.Any(iAny);
        if (!this.typeUrlMap.has(any.type_url)) {
            return new unknown_1.UnknownMessage(any.type_url, any.value);
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return this.typeUrlMap.get(any.type_url).decode(any.value);
    }
    registerAny(typeUrl, message) {
        this.typeUrlMap.set(typeUrl, message);
    }
}
exports.ProtoCodec = ProtoCodec;
exports.defaultProtoCodec = new ProtoCodec();
exports.defaultProtoCodec.registerAny("/cosmos.bank.v1beta1.MsgSend", proto_2.cosmos.bank.v1beta1.MsgSend);
exports.defaultProtoCodec.registerAny("/cosmos.staking.v1beta1.MsgDelegate", proto_2.cosmos.staking.v1beta1.MsgDelegate);
exports.defaultProtoCodec.registerAny("/cosmos.staking.v1beta1.MsgUndelegate", proto_2.cosmos.staking.v1beta1.MsgUndelegate);
exports.defaultProtoCodec.registerAny("/cosmos.staking.v1beta1.MsgBeginRedelegate", proto_2.cosmos.staking.v1beta1.MsgBeginRedelegate);
exports.defaultProtoCodec.registerAny("/cosmwasm.wasm.v1.MsgExecuteContract", proto_2.cosmwasm.wasm.v1.MsgExecuteContract);
//# sourceMappingURL=index.js.map